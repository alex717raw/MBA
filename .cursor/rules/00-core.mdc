---
description: 
globs: 
alwaysApply: true
---
---
description: Базовая архитектура TrackLogger, надёжность и требования к безопасности данных
globs:
  - "**/*"
alwaysApply: true
---

# Архитектурные шаблоны
- Использовать **MVVM** для слоя UI; **Repository** — для доступа к данным; **Service Locator** — для DI.
- Критические модули (`gps`, `storage`, `sync`) изолировать в отдельных Gradle/SwiftPM-таргетах.

# Надёжность (обязательные требования)
- Реализовать многоуровровое авто-сохранение каждые ≤ 30 с; записывать в SQLite в рабочем потоке.
- На iOS использовать `beginBackgroundTask`; на Android — `ForegroundService` с резервом через `WorkManager`.
- Сессия записи должна авто-возобновляться после сбоя/перезагрузки с помощью механизма теневой копии.

# Целостность данных
- Все операции записи транзакционные; восстановление повреждённого файла через WAL + резервную копию.
- Шифровать все пользовательские данные “в покое” (AES-256) и “в пути” (TLS 1.3).

# Кроссплатформенная база
- Минимум iOS 16.0, Android 13; использовать только API, доступные на обеих платформах.
- Единой системой координат считать WGS-84, хранить в double-точности.

# Код-стайл
- Swift: `swift-format` по умолчанию + 120 симв./стр.; Kotlin: `ktlint` по умолчанию + явные типы.
- **Не** допускать блокирующего I/O в UI-потоке.