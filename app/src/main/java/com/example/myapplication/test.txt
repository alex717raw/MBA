package com.example.myapplication

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.core.content.ContentProviderCompat.requireContext
import com.mapbox.android.core.permissions.PermissionsListener
import com.mapbox.android.core.permissions.PermissionsManager
import com.mapbox.geojson.Point
import com.mapbox.maps.extension.compose.MapEffect
import com.mapbox.maps.extension.compose.MapboxMap
import com.mapbox.maps.extension.compose.animation.viewport.rememberMapViewportState
import com.mapbox.maps.plugin.PuckBearing
import com.mapbox.maps.plugin.locationcomponent.createDefault2DPuck
import com.mapbox.maps.plugin.locationcomponent.location

class MainActivity : ComponentActivity(), PermissionsListener {

    lateinit var permissionsManager: PermissionsManager

    override fun onCreate(savedInstanceState: Bundle?) {
        var context = baseContext
        var d = applicationContext
        if (PermissionsManager.areLocationPermissionsGranted(context = d)) {
            // Permission sensitive logic called here
        } else {
            permissionsManager = PermissionsManager(this)
            permissionsManager.requestLocationPermissions(this)
        }
        super.onCreate(savedInstanceState)

        setContent {
            MyAppContent()
        }
    }

    @Composable
    fun MyAppContent() {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // Карта занимает большую часть экрана
            //MapContent(modifier = Modifier.weight(1f))

            // Панель с кнопками
            ButtonsPanel()
        }
    }


    @Composable
    fun MapContent(modifier: Modifier = Modifier) {
        val mapViewportState = rememberMapViewportState()
        var VPS = mapViewportState.transitionToFollowPuckState()
        MapboxMap(
            modifier = modifier,
            mapViewportState = mapViewportState,
        ) {
            MapEffect(Unit) { mapView ->
                mapView.location.updateSettings {
                    locationPuck = createDefault2DPuck(withBearing = true)
                    enabled = true
                    puckBearing = PuckBearing.HEADING
                    puckBearingEnabled = true
                }
            }
            mapViewportState.transitionToFollowPuckState()
        }
    }

    @Composable
    fun ButtonsPanel() {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            Button(onClick = {
                //var VPS = mapViewportState.transitionToFollowPuckState()
            }) {
                Text("VPS")
            }

            Spacer(modifier = Modifier.width(8.dp))

            Button(onClick = { /* Действие для второй кнопки */ }) {
                Text("Кнопка 2")
            }
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        permissionsManager.onRequestPermissionsResult(requestCode, permissions, grantResults)
    }

    override fun onExplanationNeeded(permissionsToExplain: List<String>) {
        // Реализуйте при необходимости
    }

    override fun onPermissionResult(granted: Boolean) {
        // Реализуйте при необходимости
    }
}